public class SudokuSolver {    private static final int GRID_SIZE = 9;    public static void main(String[] args) {        int[][] board = {            {5, 3, 0, 0, 7, 0, 0, 0, 0},            {6, 0, 0, 1, 9, 5, 0, 0, 0},            {0, 9, 8, 0, 0, 0, 0, 6, 0},            {8, 0, 0, 0, 6, 0, 0, 0, 3},            {4, 0, 0, 8, 0, 3, 0, 0, 1},            {7, 0, 0, 0, 2, 0, 0, 0, 6},            {0, 6, 0, 0, 0, 0, 2, 8, 0},            {0, 0, 0, 4, 1, 9, 0, 0, 5},            {0, 0, 0, 0, 8, 0, 0, 7, 9}        };        System.out.println("Unsolved Sudoku:");        printBoard(board);        if (solveBoard(board)) {            System.out.println("\nSolved Sudoku:");            printBoard(board);        } else {            System.out.println("This Sudoku puzzle cannot be solved.");        }    }    private static boolean solveBoard(int[][] board) {        for (int row = 0; row < GRID_SIZE; row++) {            for (int col = 0; col < GRID_SIZE; col++) {                if (board[row][col] == 0) { // Find an empty cell                    for (int number = 1; number <= GRID_SIZE; number++) {                        if (isValid(board, number, row, col)) {                            board[row][col] = number;                            if (solveBoard(board)) {                                return true;                            }                            // Backtrack                            board[row][col] = 0;                        }                    }                    return false; // No valid number found, backtrack                }            }        }        return true; // Puzzle solved    }    private static boolean isValid(int[][] board, int number, int row, int col) {        // Check row        for (int i = 0; i < GRID_SIZE; i++) {            if (board[row][i] == number) {                return false;            }        }        // Check column        for (int i = 0; i < GRID_SIZE; i++) {            if (board[i][col] == number) {                return false;            }        }        // Check 3x3 sub-grid        int subGridRowStart = row - row % 3;        int subGridColStart = col - col % 3;        for (int i = subGridRowStart; i < subGridRowStart + 3; i++) {            for (int j = subGridColStart; j < subGridColStart + 3; j++) {                if (board[i][j] == number) {                    return false;                }            }        }        return true;    }    private static void printBoard(int[][] board) {        for (int row = 0; row < GRID_SIZE; row++) {            if (row % 3 == 0 && row != 0) {                System.out.println("-----------");            }            for (int col = 0; col < GRID_SIZE; col++) {                if (col % 3 == 0 && col != 0) {                    System.out.print("|");                }                System.out.print(board[row][col] == 0 ? " " : board[row][col]);            }            System.out.println();        }    }}